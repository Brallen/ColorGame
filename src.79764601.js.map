{"version":3,"sources":["node_modules/delaunator/index.js","node_modules/d3-delaunay/src/path.js","node_modules/d3-delaunay/src/polygon.js","node_modules/d3-delaunay/src/voronoi.js","node_modules/d3-delaunay/src/delaunay.js","node_modules/d3-delaunay/src/index.js","node_modules/seedrandom/lib/alea.js","node_modules/seedrandom/lib/xor128.js","node_modules/seedrandom/lib/xorwow.js","node_modules/seedrandom/lib/xorshift7.js","node_modules/seedrandom/lib/xor4096.js","node_modules/seedrandom/lib/tychei.js","node_modules/seedrandom/seedrandom.js","node_modules/seedrandom/index.js","src/util/ColorUtil.js","src/util/RNGUtil.js","src/voronoi.js","src/ColorShape.js","src/ColorQueue.js","src/QueueDisplay.js","src/Game.js","src/index.js"],"names":["EPSILON","Math","pow","EDGE_STACK","Uint32Array","Delaunator","from","points","getX","defaultGetX","getY","defaultGetY","n","length","coords","Float64Array","i","p","constructor","Error","maxTriangles","max","_triangles","_halfedges","Int32Array","_hashSize","ceil","sqrt","_hullPrev","_hullNext","_hullTri","_hullHash","fill","_ids","_dists","update","hullPrev","hullNext","hullTri","hullHash","minX","Infinity","minY","maxX","maxY","x","y","cx","cy","minDist","i0","i1","i2","d","dist","i0x","i0y","i1x","i1y","minRadius","r","circumradius","i2x","i2y","quicksort","hull","j","d0","id","subarray","triangles","halfedges","orient","center","circumcenter","_cx","_cy","_hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","xp","yp","k","abs","start","key","e","q","t","_legalize","floor","pseudoAngle","a","ar","b","a0","b0","al","bl","p0","pr","pl","p1","illegal","inCircle","hbl","_link","br","c","dx","dy","ax","ay","bx","by","orientIfSure","px","py","rx","ry","qx","qy","l","sign","ex","ey","fx","fy","bp","cp","cl","ids","dists","left","right","temp","tempDist","swap","arr","tmp","epsilon","Path","_x0","_y0","_x1","_y1","_","moveTo","closePath","lineTo","arc","x0","y0","rect","w","h","value","Polygon","push","slice","Voronoi","delaunay","xmin","ymin","xmax","ymax","_circumcenters","vectors","_init","circumcenters","t1","t2","t3","x1","y1","x2","y2","x3","y3","ab","render","context","buffer","undefined","inedges","ti","tj","xi","yi","xj","yj","_renderSegment","h0","h1","v","_project","renderBounds","renderCell","_clip","cellPolygons","cell","cellPolygon","polygon","S","c0","_regioncode","c1","_clipSegment","contains","_step","neighbors","ci","cj","loop","ai","li","aj","lj","_cell","e0","V","_clipInfinite","_clipFinite","P","e1","sx0","sy0","sx1","sy1","_edgecode","_edge","vx0","vy0","vxn","vyn","Array","unshift","splice","vx","vy","tau","PI","pointX","pointY","collinear","cross","jitter","sin","cos","Delaunay","_delaunator","_hullIndex","sort","f","bounds","hullIndex","voronoi","indexOf","find","dc","dt","renderHull","renderPoints","hullPolygon","renderTriangle","t0","trianglePolygons","trianglePolygon","flatArray","that","array","call","flatIterable","ColorUtil","g","rgba","hex","replace","m","substring","match","map","parseInt","concat","rgb","hexToRgba","rgbaToCSSRgba","RNGUtil","rng","seed","end","alpha","randInRange","generatePoints","count","width","height","trueNeighbors","Set","String","has","add","getVoronoiData","Shape","DEFAULT_THICKNESS","ColorShape","color","vertices","thickness","drawSelf","createjs","shape","neighbor","hitTest","graphics","clear","setStrokeStyle","beginStroke","beginFill","vertex","endFill","ColorQueue","colors","queue","addColorToQueue","shift","QueueDisplay","tile","drawRect","SELECT_THICKNESS","CURRENT_SHAPE_THICKNESS","Game","setRNGBySeed","colorQueue","fillQueue","stage","Stage","enableMouseOver","generateBoard","queueContainer","initQueueContainer","currentShape","getChildAt","round","setStrokeThickness","setColor","getNextColor","nextColor","updateQueueContainer","addEventListener","onClick","bind","onMouseOver","onMouseOut","isNeighbor","target","validShape","moveEvent","matchedShapes","Map","matches","get","set","forEach","adjacentShape","getObjectUnderPoint","findMatches","shapes","values","newShape","fillMatches","getMatches","updateCanvas","item","addShape","text","Text","addChild","removeAllChildren","getQueue","first","createSquare","second","third","canvas","document","getElementById","window","onload"],"mappings":"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","file":"src.79764601.js","sourceRoot":"..","sourcesContent":["\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nexport default class Delaunator {\n\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    }\n\n    update() {\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\n        const n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            this._ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let minDist = Infinity;\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (let i = 0; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (let i = 0; i < n; i++) {\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            const hull = new Uint32Array(n);\n            let j = 0;\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\n                const id = this._ids[i];\n                if (this._dists[id] > d0) {\n                    hull[j++] = id;\n                    d0 = this._dists[id];\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (let i = 0; i < n; i++) {\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\n            const i = this._ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) this._halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\n// return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check\nfunction orientIfSure(px, py, rx, ry, qx, qy) {\n    const l = (ry - py) * (qx - px);\n    const r = (rx - px) * (qy - py);\n    return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;\n}\n\n// a more robust orientation test that's stable in a given triangle (to fix robustness issues)\nfunction orient(rx, ry, qx, qy, px, py) {\n    const sign = orientIfSure(px, py, rx, ry, qx, qy) ||\n    orientIfSure(rx, ry, qx, qy, px, py) ||\n    orientIfSure(qx, qy, px, py, rx, ry);\n    return sign < 0;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n    return p[0];\n}\nfunction defaultGetY(p) {\n    return p[1];\n}\n","const epsilon = 1e-6;\n\nexport default class Path {\n  constructor() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n  }\n  moveTo(x, y) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  }\n  lineTo(x, y) {\n    this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arc(x, y, r) {\n    x = +x, y = +y, r = +r;\n    const x0 = x + r;\n    const y0 = y;\n    if (r < 0) throw new Error(\"negative radius\");\n    if (this._x1 === null) this._ += `M${x0},${y0}`;\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\n    if (!r) return;\n    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n  }\n  rect(x, y, w, h) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n  }\n  value() {\n    return this._ || null;\n  }\n}\n","export default class Polygon {\n  constructor() {\n    this._ = [];\n  }\n  moveTo(x, y) {\n    this._.push([x, y]);\n  }\n  closePath() {\n    this._.push(this._[0].slice());\n  }\n  lineTo(x, y) {\n    this._.push([x, y]);\n  }\n  value() {\n    return this._.length ? this._ : null;\n  }\n}\n","import Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\n\nexport default class Voronoi {\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    this.delaunay = delaunay;\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\n    this.vectors = new Float64Array(delaunay.points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n    this._init();\n  }\n  update() {\n    this.delaunay.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const {delaunay: {points, hull, triangles}, vectors} = this;\n\n    // Compute circumcenters.\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n\n      const dx = x2 - x1;\n      const dy = y2 - y1;\n      const ex = x3 - x1;\n      const ey = y3 - y1;\n      const bl = dx * dx + dy * dy;\n      const cl = ex * ex + ey * ey;\n      const ab = (dx * ey - dy * ex) * 2;\n\n      if (!ab) {\n        // degenerate case (collinear diagram)\n        x = (x1 + x3) / 2 - 1e8 * ey;\n        y = (y1 + y3) / 2 + 1e8 * ex;\n      }\n      else if (Math.abs(ab) < 1e-8) {\n        // almost equal points (degenerate triangle)\n        x = (x1 + x3) / 2;\n        y = (y1 + y3) / 2;\n      } else {\n        const d = 1 / ab;\n        x = x1 + (ey * bl - dy * cl) * d;\n        y = y1 + (dx * cl - ex * bl) * d;\n      }\n      circumcenters[j] = x;\n      circumcenters[j + 1] = y;\n    }\n\n    // Compute exterior cell rays.\n    let h = hull[hull.length - 1];\n    let p0, p1 = h * 4;\n    let x0, x1 = points[2 * h];\n    let y0, y1 = points[2 * h + 1];\n    vectors.fill(0);\n    for (let i = 0; i < hull.length; ++i) {\n      h = hull[i];\n      p0 = p1, x0 = x1, y0 = y1;\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    }\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;\n    if (hull.length <= 1) return null;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n    let h0, h1 = hull[hull.length - 1];\n    for (let i = 0; i < hull.length; ++i) {\n      h0 = h1, h1 = hull[i];\n      const t = Math.floor(inedges[h1] / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = h0 * 4;\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    }\n    return buffer && buffer.value();\n  }\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const points = this._clip(i);\n    if (points === null) return;\n    context.moveTo(points[0], points[1]);\n    let n = points.length;\n    while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;\n    for (let i = 2; i < n; i += 2) {\n      if (points[i] !== points[i-2] || points[i+1] !== points[i-1])\n        context.lineTo(points[i], points[i + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *cellPolygons() {\n    const {delaunay: {points}} = this;\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) yield cell;\n    }\n  }\n  cellPolygon(i) {\n    const polygon = new Polygon;\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n    const c0 = this._regioncode(x0, y0);\n    const c1 = this._regioncode(x1, y1);\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n  *neighbors(i) {\n    const ci = this._clip(i);\n    if (ci) for (const j of this.delaunay.neighbors(i)) {\n      const cj = this._clip(j);\n      // find the common edge\n      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\n        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\n          if (ci[ai] == cj[aj]\n          && ci[ai + 1] == cj[aj + 1]\n          && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj]\n          && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]\n          ) {\n            yield j;\n            break loop;\n          }\n        }\n      }\n    }\n  }\n  _cell(i) {\n    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n    const points = [];\n    let e = e0;\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n    return points;\n  }\n  _clip(i) {\n    // degenerate case (1 valid point: return the box)\n    if (i === 0 && this.delaunay.hull.length === 1) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    const points = this._cell(i);\n    if (points === null) return null;\n    const {vectors: V} = this;\n    const v = i * 4;\n    return V[v] || V[v + 1]\n        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\n        : this._clipFinite(i, points);\n  }\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n    let c0, c1 = this._regioncode(x1, y1);\n    let e0, e1;\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);\n        else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);\n          else P = [sx0, sy0];\n        }\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);\n        else P = [sx1, sy1];\n      }\n    }\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    return P;\n  }\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    while (true) {\n      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x, y, c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points), p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n    return P;\n  }\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n      switch (e0) {\n        case 0b0101: e0 = 0b0100; continue; // top-left\n        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\n        case 0b0110: e0 = 0b0010; continue; // top-right\n        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\n        case 0b1010: e0 = 0b1000; continue; // bottom-right\n        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\n        case 0b1001: e0 = 0b0001; continue; // bottom-left\n        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\n      }\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n    if (P.length > 4) {\n      for (let i = 0; i < P.length; i+= 2) {\n        const j = (i + 2) % P.length, k = (i + 4) % P.length;\n        if (P[i] === P[j] && P[j] === P[k]\n        || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1])\n          P.splice(j, 2), i -= 2;\n      }\n    }\n    return j;\n  }\n  _project(x0, y0, vx, vy) {\n    let t = Infinity, c, x, y;\n    if (vy < 0) { // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) { // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n    if (vx > 0) { // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) { // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n    return [x, y];\n  }\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001\n        : x === this.xmax ? 0b0010 : 0b0000)\n        | (y === this.ymin ? 0b0100\n        : y === this.ymax ? 0b1000 : 0b0000);\n  }\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001\n        : x > this.xmax ? 0b0010 : 0b0000)\n        | (y < this.ymin ? 0b0100\n        : y > this.ymax ? 0b1000 : 0b0000);\n  }\n}\n","import Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\n\nconst tau = 2 * Math.PI;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\n// A triangulation is collinear if all its triangles have a non-null area\nfunction collinear(d) {\n  const {triangles, coords} = d;\n  for (let i = 0; i < triangles.length; i += 3) {\n    const a = 2 * triangles[i],\n          b = 2 * triangles[i + 1],\n          c = 2 * triangles[i + 2],\n          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])\n                - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n    if (cross > 1e-10) return false;\n  }\n  return true;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n}\n\nexport default class Delaunay {\n  constructor(points) {\n    this._delaunator = new Delaunator(points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = this._delaunator.coords;\n    this._init();\n  }\n  update() {\n    this._delaunator.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const d = this._delaunator, points = this.points;\n\n    // check for collinear\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\n      this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)\n        .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],\n        bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],\n        r = 1e-8 * Math.sqrt((bounds[3] - bounds[1])**2 + (bounds[2] - bounds[0])**2);\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n      this._delaunator = new Delaunator(points);\n    } else {\n      delete this.collinear;\n    }\n\n    const halfedges = this.halfedges = this._delaunator.halfedges;\n    const hull = this.hull = this._delaunator.hull;\n    const triangles = this.triangles = this._delaunator.triangles;\n    const inedges = this.inedges.fill(-1);\n    const hullIndex = this._hullIndex.fill(-1);\n\n    // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n    }\n    for (let i = 0, n = hull.length; i < n; ++i) {\n      hullIndex[hull[i]] = i;\n    }\n\n    // degenerate case: 1 or 2 (distinct) points\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      this.triangles[1] = hull[1];\n      this.triangles[2] = hull[1];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) inedges[hull[1]] = 0;\n    }\n  }\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n  *neighbors(i) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;\n\n    // degenerate case with several collinear points\n    if (collinear) {\n      const l = collinear.indexOf(i);\n      if (l > 0) yield collinear[l - 1];\n      if (l < collinear.length - 1) yield collinear[l + 1];\n      return;\n    }\n\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n    let e = e0, p0 = -1;\n    do {\n      yield p0 = triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) yield p;\n        return;\n      }\n    } while (e !== e0);\n  }\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    const i0 = i;\n    let c;\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n    return c;\n  }\n  _step(i, x, y) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    let c = i;\n    let dc = (x - points[i * 2]) ** 2 + (y - points[i * 2 + 1]) ** 2;\n    const e0 = inedges[i];\n    let e = e0;\n    do {\n      let t = triangles[e];\n      const dt = (x - points[t * 2]) ** 2 + (y - points[t * 2 + 1]) ** 2;\n      if (dt < dc) dc = dt, c = t;\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        e = hull[(_hullIndex[i] + 1) % hull.length];\n        if (e !== t) {\n          if ((x - points[e * 2]) ** 2 + (y - points[e * 2 + 1]) ** 2 < dc) return e;\n        }\n        break;\n      }\n    } while (e !== e0);\n    return c;\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, halfedges, triangles} = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n  renderPoints(context, r = 2) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points} = this;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i], y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n    return buffer && buffer.value();\n  }\n  renderHull(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {hull, points} = this;\n    const h = hull[0] * 2, n = hull.length;\n    context.moveTo(points[h], points[h + 1]);\n    for (let i = 1; i < n; ++i) {\n      const h = 2 * hull[i];\n      context.lineTo(points[h], points[h + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  hullPolygon() {\n    const polygon = new Polygon;\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, triangles} = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *trianglePolygons() {\n    const {triangles} = this;\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n  trianglePolygon(i) {\n    const polygon = new Polygon;\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n}\n\nDelaunay.from = function(points, fx = pointX, fy = pointY, that) {\n  return new Delaunay(\"length\" in points\n      ? flatArray(points, fx, fy, that)\n      : Float64Array.from(flatIterable(points, fx, fy, that)));\n};\n\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n  return array;\n}\n\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}\n","export {default as Delaunay} from \"./delaunay.js\";\nexport {default as Voronoi} from \"./voronoi.js\";\n","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = String(data);\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (global, pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\n\nvar width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n} else {\n  // When included as a plain script, set up Math.seedrandom global.\n  math['seed' + rngname] = seedrandom;\n}\n\n\n// End anonymous scope, and pass initial values.\n})(\n  // global: `self` in browsers (including strict mode and web workers),\n  // otherwise `this` in Node and other environments\n  (typeof self !== 'undefined') ? self : this,\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","// Collection of util functions to help us do color conversions\nexport default class ColorUtil {\n  // Can be \"overloaded\" with an rgba array at the first argument\n  static rgbaToCSSRgba(r, g, b, a = 1.0) {\n    if (r.length !== undefined) {\n      const rgba = r;\n      return `rgba(${rgba[0]},${rgba[1]},${rgba[2]},${rgba[3]})`;\n    }\n\n    return `rgba(${r},${g},${b},${a})`;\n  }\n  \n  static hexToRgba(hex) {\n    return hex.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i\n                      ,(m, r, g, b) => '#' + r + r + g + g + b + b)\n      .substring(1).match(/.{2}/g)\n      .map(x => parseInt(x, 16)).concat([1]);\n  }\n  \n  static hexToCSSRgba(hex, a = 1.0) {\n    const rgb = ColorUtil.hexToRgba(hex);\n    return ColorUtil.rgbaToCSSRgba(rgb[0], rgb[1], rgb[2], a);\n  }\n}","import seedrandom from 'seedrandom';\nimport ColorUtil from './ColorUtil';\n\nexport default class RNGUtil {\n  static getRNG() {\n    return this.rng;\n  }\n  \n  static setRNGBySeed(seed) {\n    this.rng = seedrandom(seed);\n  }\n  \n  static randInRange(start, end) {\n    if (this.rng) {\n      return ((end - start) * this.rng()) + start;\n    }\n  }\n\n  static randColor(a) {\n    // If alpha not specified, get random alpha\n    const alpha = a || this.rng();\n\n    return [\n      RNGUtil.randInRange(0, 255),\n      RNGUtil.randInRange(0, 255),\n      RNGUtil.randInRange(0, 255),\n      alpha];\n  }\n\n  static randCSSColor(a) {\n    // If alpha not specified, get random alpha\n    const alpha = a || this.rng();\n    \n    return ColorUtil.rgbaToCSSRgba(\n      RNGUtil.randInRange(0, 255),\n      RNGUtil.randInRange(0, 255),\n      RNGUtil.randInRange(0, 255),\n      alpha);\n  }\n}","import { Delaunay } from 'd3-delaunay';\nimport RNGUtil from './util/RNGUtil';\n\nfunction generatePoints(count, width, height) {\n  const points = [];\n\n  for (let i = 0; i < count; i++) {\n    points.push([ RNGUtil.randInRange(0, width), RNGUtil.randInRange(0, height) ]);\n  }\n\n  return points;\n}\n\n// PATCH: Fixes issues with view port boundaries not being considered in calculation of neighbors\nfunction trueNeighbors(voronoi, points, i) {\n  const n = new Set();\n  const ai = new Set((voronoi.cellPolygon(i) || []).map(String));\n  for (const j of voronoi.delaunay.neighbors(i))\n    for (const c of voronoi.cellPolygon(j) || [])\n      if (ai.has(String(c))) n.add(j);\n  return [...n].map((value) => {\n    return points[value];\n  });\n}\n\nexport function getVoronoiData(count, width, height) {\n  const points = generatePoints(count, width, height);\n  const delaunay = Delaunay.from(points);\n  const voronoi = delaunay.voronoi([0, 0, width, height]);\n\n  const cellPolygons = [];\n  for (let i = 0; i < count; i++) {\n    cellPolygons.push({\n      cell: voronoi.cellPolygon(i),\n      neighbors: trueNeighbors(voronoi, points, i)\n    });\n  }\n\n  return cellPolygons;\n}","const DEFAULT_THICKNESS = 4;\n\nexport default class ColorShape extends createjs.Shape {\n    constructor(color, vertices, neighbors) {\n        super();\n        this.neighbors = neighbors;\n        this.vertices = vertices;\n        this.color = color;\n        this.thickness = DEFAULT_THICKNESS;\n        this.drawSelf(color);\n    }\n\n    // Check to see if any neighbor coordinates fit within the given shape\n    isNeighbor(shape) {\n        for(const neighbor of this.neighbors) {\n            if (shape.hitTest(neighbor[0], neighbor[1])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    // Permanently change the color\n    setColor(color) {\n        this.color = color;\n    }\n\n    // Permanently change the stroke thickness\n    setStrokeThickness(thickness = DEFAULT_THICKNESS) {\n        this.thickness = thickness;\n    }\n\n    drawSelf(color = this.color, thickness = this.thickness) {\n        const { graphics, vertices } = this;\n        graphics.clear();\n        graphics.setStrokeStyle(thickness);\n        graphics.beginStroke('black');\n        graphics.beginFill(color);\n        graphics.moveTo(vertices[0][0], vertices[0][1]);\n        for (let i = 1; i < vertices.length; i++) {\n            const vertex = vertices[i];\n            graphics.lineTo(vertex[0], vertex[1]);\n        }\n        graphics.endFill();\n        graphics.closePath();\n    }\n       \n}","import RNGUtil from './util/RNGUtil';\nimport ColorUtil from './util/ColorUtil';\n\nexport default class ColorQueue {\n    constructor() {\n        this.colors = [\n            [110, 125, 206, 1], // #6E7DCE\n            [242, 126, 119, 1], // #F27E77\n            [132, 224, 160, 1], // #84E0A0\n            [242, 231, 150, 1]  //#F2E796\n        ];\n        this.queue = [];\n    }\n\n    fillQueue() {\n        for(let i = 0; i < 3; i++) {\n            this.addColorToQueue();\n        }\n    }\n\n    addColorToQueue() {\n        this.queue.push(this.colors[Math.floor(RNGUtil.randInRange(0,4))]);\n    }\n\n    getQueue() {\n        return this.queue;\n    }\n\n    getNextColor() {\n        this.addColorToQueue();\n        return this.queue.shift();\n    }\n}","export default class QueueDisplay {\n\n    static createSquare(color, x, y) {\n        var tile = new createjs.Shape();\n        tile.graphics.beginFill(color);\n        tile.graphics.drawRect(x, y, 85, 85);\n        tile.graphics.endFill();\n\n        return tile;\n    }\n}","import { getVoronoiData } from './voronoi';\nimport RNGUtil from './util/RNGUtil';\nimport ColorShape from './ColorShape';\nimport ColorUtil from './util/ColorUtil';\nimport ColorQueue from './ColorQueue';\nimport QueueDisplay from './QueueDisplay';\n\nconst SELECT_THICKNESS = 6;\nconst CURRENT_SHAPE_THICKNESS = 8;\n\nexport default class Game {\n    constructor(count, width, height) {\n        RNGUtil.setRNGBySeed('test');\n        this.colorQueue = new ColorQueue();\n        this.colorQueue.fillQueue();\n\n        this.stage = new createjs.Stage('board');\n        this.stage.enableMouseOver();\n        this.generateBoard(count, width, height);\n\n        this.queueContainer = new createjs.Stage('color-queue');\n        this.initQueueContainer(205, 360);\n\n        // Player position tracking\n        this.currentShape = this.stage.getChildAt(Math.round(RNGUtil.randInRange(0, count - 1)));\n        this.currentShape.setStrokeThickness(CURRENT_SHAPE_THICKNESS);\n        this.currentShape.setColor(ColorUtil.rgbaToCSSRgba(this.colorQueue.getNextColor()));\n        this.currentShape.drawSelf();\n\n        //set the next color to be next in queue\n        this.nextColor = this.colorQueue.getNextColor();\n        this.updateQueueContainer();\n\n        this.stage.addEventListener('click', this.onClick.bind(this));\n        this.stage.addEventListener('mouseover', this.onMouseOver.bind(this));\n        this.stage.addEventListener('mouseout', this.onMouseOut.bind(this));\n    }\n\n    validShape(shape) {\n        return (\n            (shape.id !== this.currentShape.id) &&\n            this.currentShape.isNeighbor(shape));\n    }\n\n    // Fired whenever the mouse enters a shape\n    onMouseOver({ target }) {\n        if (!this.validShape(target)) return;\n\n        const { nextColor } = this;\n\n        target.setStrokeThickness(SELECT_THICKNESS);\n        target.drawSelf(ColorUtil.rgbaToCSSRgba(nextColor[0], nextColor[1], nextColor[2], 0.5));\n        this.render();\n    }\n\n    // Fired whenever the mouse exits a shape\n    onMouseOut({ target }) {\n        if (!this.validShape(target)) return;\n\n        target.setStrokeThickness()\n        target.drawSelf();\n        this.render();\n    }\n\n    onClick({ target }) {\n        if (this.validShape(target)) {\n            this.moveEvent(target);\n        }\n    }\n\n    getMatches(shape) {\n        const matchedShapes = new Map();\n        this.match(shape, shape.color, matchedShapes);\n\n        return matchedShapes;\n    }\n\n    findMatches(shape, color, matches) {\n        // If current shape does not match color or is a visited shape, exit\n        if (shape.color !== color || matches.get(shape.id) !== undefined ) { return; }\n\n        matches.set(shape.id, shape);\n        // Check shape's neighbors\n        shape.neighbors.forEach((neighbor) => {\n            const adjacentShape = this.stage.getObjectUnderPoint(neighbor[0], neighbor[1]);\n            if (adjacentShape !== undefined) {\n                this.findMatches(adjacentShape, color, matches);\n            }\n        })\n    }\n\n    // TODO: Replace with Noah's combo function\n    fillMatches(matches) {\n        const shapes = [...matches.values()]\n        if (shapes.length >= 3) {\n            shapes.forEach((match) => {\n                match.setColor('black');\n                match.drawSelf();\n            });\n        }\n    }\n\n    moveEvent(newShape) {\n        newShape.setColor(ColorUtil.rgbaToCSSRgba(this.nextColor));\n\n        newShape.setStrokeThickness(CURRENT_SHAPE_THICKNESS);\n        newShape.setColor(ColorUtil.rgbaToCSSRgba(this.nextColor));\n        newShape.drawSelf();\n        \n        this.currentShape.setStrokeThickness();\n        this.currentShape.drawSelf();\n        \n        // TODO: Replace with Noah's combo function\n        this.fillMatches(this.getMatches(newShape));\n\n        this.nextColor = this.colorQueue.getNextColor();\n        this.currentShape = newShape;\n\n        this.updateQueueContainer();\n\n        this.render();\n    }\n\n    generateBoard(count, width, height) {\n        this.updateCanvas('board', width, height);\n        const data = getVoronoiData(count, width, height);\n        data.forEach((item) => {\n            this.addShape('white', item.cell, item.neighbors);\n        });\n    }\n\n    initQueueContainer(width, height) {\n        this.updateCanvas('color-queue', width, height);\n        const text = new createjs.Text(\"Next\", \"32px Roboto\", \"#000000\");\n        text.x = 70;\n        text.y = 15;\n        this.queueContainer.addChild(text);\n    }\n\n    updateQueueContainer() {\n        this.queueContainer.removeAllChildren();\n        const colors = this.colorQueue.getQueue();\n        const first = QueueDisplay.createSquare(ColorUtil.rgbaToCSSRgba(this.nextColor), 60, 60);\n        const second = QueueDisplay.createSquare(ColorUtil.rgbaToCSSRgba(colors[0]), 60, 160);\n        const third = QueueDisplay.createSquare(ColorUtil.rgbaToCSSRgba(colors[1]), 60, 260);\n        this.queueContainer.addChild(first, second, third);\n    }\n\n    updateCanvas(stage, width, height) {\n        const canvas = document.getElementById(stage);\n        canvas.width = width;\n        canvas.height = height;\n    }\n\n    addShape(color, vertices, neighbors) {\n        const shape = new ColorShape(color, vertices, neighbors);\n        this.stage.addChild(shape);\n    }\n\n    render() {\n        this.stage.update();\n        this.queueContainer.update();\n    }\n}","import Game from './Game';\n\nwindow.onload = () => {\n  var game = new Game(25, 710, 710);\n  game.render();\n};\n"]}